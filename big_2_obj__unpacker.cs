// основной - работаем 

//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Collections;
using System.Collections.Generic;

//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

sealed class big2obj
{

//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

		static string big_path  ; // хранит путь к файлу *.big
		static string writePath ; // хранит путь к файлу *[i].obj
		static int   i = 0 ; // индекс в массиве байт всего файла

//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

		static void Main()
		{

//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

				// ищет файлы с расширением *.big в подпапках
				string[] files = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.big", SearchOption.AllDirectories) ; 

//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

				List<byte> vertexs_count = new List<byte>() ; // содержит список значений количества
				List<byte> normals_count = new List<byte>() ; // содержит список значений количества
				List<byte> primsss_count = new List<byte>() ; // содержит список значений количества
				List<byte> ddsList = new List<byte>() ;

//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

				foreach ( var file in files ) // для каждой строки , содержащей имф файла.big , содержащейся в массиве строк 
				{
						Console.WriteLine(file) ; // пишем имя файла в консоли
						byte[] array1d = File.ReadAllBytes(file) ; // читаем все байты из файла 
						int files_name_counter = 1 ; // счётчик моделей и имён файлов для них

//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

						for ( i = 0 ; i < array1d.Length - 42 ; i++ ) // - 7 , потому что ищем до размер файла - 7 байт . ПОНЯТНО ? (нет) (да) // 22 // 40 // 42 // 44 
						{
								//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
								// ИЩЕМ ВЕРШИНЫ
								//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

								//---position---position---position---position---position---position---position

								// если нашли строку "position" = 00 00 00 00 70 6F 73 69 74 69 6F 6E 

								if ( array1d[i+0] == 0x00 & array1d[i+1] == 0x00 & array1d[i+2]  == 0x00 & array1d[i+3]  == 0x00 &
										 array1d[i+4] == 0x70 & array1d[i+5] == 0x6F & array1d[i+6]  == 0x73 & array1d[i+7]  == 0x69 &
										 array1d[i+8] == 0x74 & array1d[i+9] == 0x69 & array1d[i+10] == 0x6F & array1d[i+11] == 0x6E )
								{
										// через 20 байт (от начала "сигнатуры") записано количество вершин , считываем и запоминаем его
//*
										byte[] v_count_four_bytes_int = { array1d[i+20+0] , array1d[i+20+1] , array1d[i+20+2] , array1d[i+20+3] } ; 
										int v_count = BitConverter.ToInt32(v_count_four_bytes_int , 0) ;

										// эта цифра указывает сколько (байт*4) надо считать // например она равна 6 , значит нужно считать 6 пар типа [00 00 00 00]

										// Console.WriteLine("Количество вершин = " + v_count + "\t" + "Количество байт = "   + v_count*3*4 + "\n" ) ;

										// ещё через 4 начинается список координат вершин [i+22]
										// считываем все байты содержащие "значения" вершин в массив

										for ( int ii = 0 ; ii < v_count*3*4 ; ii++ ) // количество вершин * 3 координаты * 4 байта
										{
												vertexs_count.Add ( array1d[i+24+ii] ) ; // где то после 22 стоит не float значение !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
										}
//*/
										// --------------------------------------------------------------------------------------------------------------

										big_path = System.IO.Path.GetDirectoryName(file);
										writePath = big_path + "/" + Path.GetFileNameWithoutExtension(file) + "___" + files_name_counter + ".obj" ;
										if (File.Exists(writePath)) File.Delete(writePath);

										// --------------------------------------------------------------------------------------------------------------
//*
										using ( StreamWriter sw = new StreamWriter ( writePath , true , System.Text.Encoding.Default ) )
										{
//!!!!!!!!!!!!!!!!!!
												sw.WriteLine( "# {0} vertices " , v_count ) ; // записываем строку в файл *.obj
										}

										// --------------------------------------------------------------------------------------------------------------

										for ( int ii = 0 ; ii < vertexs_count.Count ; ii+=12 )
										{
												// float занимает 4 байта и их по три координаты

												byte[] fourBytes1 = { vertexs_count[ii+0] , vertexs_count[ii+1] , vertexs_count[ii+2 ] , vertexs_count[ii+3 ] } ; 
												byte[] fourBytes2 = { vertexs_count[ii+4] , vertexs_count[ii+5] , vertexs_count[ii+6 ] , vertexs_count[ii+7 ] } ; 
												byte[] fourBytes3 = { vertexs_count[ii+8] , vertexs_count[ii+9] , vertexs_count[ii+10] , vertexs_count[ii+11] } ;

												float v1 = BitConverter.ToSingle(fourBytes1 , 0) ;
												float v2 = BitConverter.ToSingle(fourBytes2 , 0) ;
												float v3 = BitConverter.ToSingle(fourBytes3 , 0) ;
												
												// --------------------------------------------------------------------------------------------------------------

												using ( StreamWriter sw = new StreamWriter ( writePath , true , System.Text.Encoding.Default ) )
												{
//!!!!!!!!!!!!!!!!!!
														sw.WriteLine( "v " + v1 + " " + v2 + " " + v3 ) ; // записываем строку в файл *.obj
												}

										} // for // для всех вершин
//*/
										files_name_counter++ ; // нашли "вершины" - увеличили счётчик файденных моделей // это может стоять после всех "блоков" модели

								} // if // если нашли , то записали в файл
//*
								vertexs_count.Clear() ; // очистили список , чтобы не наполнялся другими данными

								//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
								// ИЩЕМ Vn (нормали)
								//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

								if ( array1d[i+0] == 0x6E & array1d[i+1] == 0x6F & array1d[i+2]  == 0x72 & array1d[i+3]  == 0x6D &
										 array1d[i+4] == 0x61 & array1d[i+5] == 0x6C & array1d[i+6]  == 0x73 & array1d[i+7]  == 0x00 )
								{
										// через 16 байт (от начала "сигнатуры") записано количество нормалей , запоминаем его
										byte[] n_count_four_bytes_int = { array1d[i+16+0] , array1d[i+16+1] , array1d[i+16+2] , array1d[i+16+3] } ; 

										int n_count = BitConverter.ToInt32 ( n_count_four_bytes_int , 0 ) ;

										for ( int ii = 0 ; ii < n_count*3*4 ; ii++ ) 
												normals_count.Add ( array1d[i+20+ii] ) ;

										// --------------------------------------------------------------------------------------------------------------


										using ( StreamWriter sw = new StreamWriter ( writePath , true , System.Text.Encoding.Default ) )
										{
//!!!!!!!!!!!!!!!!!!
												sw.WriteLine( "\n# {0} normals " , n_count ) ; // 
										}

										// --------------------------------------------------------------------------------------------------------------

										for ( int ii = 0 ; ii < normals_count.Count ; ii+=12 )
										{
												// float занимает 4 байта и их по три координаты

												byte[] fourBytes1 = { normals_count[ii+0] , normals_count[ii+1] , normals_count[ii+2 ] , normals_count[ii+3 ] } ; 
												byte[] fourBytes2 = { normals_count[ii+4] , normals_count[ii+5] , normals_count[ii+6 ] , normals_count[ii+7 ] } ; 
												byte[] fourBytes3 = { normals_count[ii+8] , normals_count[ii+9] , normals_count[ii+10] , normals_count[ii+11] } ;

												float vn1 = BitConverter.ToSingle(fourBytes1 , 0) ;
												float vn2 = BitConverter.ToSingle(fourBytes2 , 0) ;
												float vn3 = BitConverter.ToSingle(fourBytes3 , 0) ;
												
												// --------------------------------------------------------------------------------------------------------------

												using ( StreamWriter sw = new StreamWriter ( writePath , true , System.Text.Encoding.Default ) )
												{
//!!!!!!!!!!!!!!!!!!
														sw.WriteLine( "vn " + vn1 + " " + vn2 + " " + vn3 ) ; 
												}
										}

								} // if // если нашли нормали , то записали в файл

								normals_count.Clear() ; // очистили список , чтобы не наполнялся другими данными
//*/
								//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
								// ИЩЕМ ГРАНИ FACES ( prims )
								//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

								// если нашли строку "prims..." = 70 72 69 6D 73 ( 00 00 00 )

								if ( array1d[i+0] == 0x70 & array1d[i+1] == 0x72 & array1d[i+2] == 0x69 & array1d[i+3] == 0x6D & array1d[i+4] == 0x73 )
								{
										int id = i + 24 ; // это было очень сложно
										int offset = 0  ; // 4 8 12 16 18 40

										// читаем размер блока // не знаю зачем
										byte[] f_size_four_bytes_int = { array1d[i+8+0] , array1d[i+8+1] , array1d[i+8+2] , array1d[i+8+3] } ; 
										int fb_size = BitConverter.ToInt32 ( f_size_four_bytes_int , 0 ) ;

										int fs_count = array1d[i+16] ; 	// читаем количество "саб"-мешей

										// --------------------------------------------------------------------------------------------------------------

										for ( int fi = 0 ; fi < fs_count ; fi++ )	// повторяем необходимое кол-во раз равное кол-ву саб-мешей
										{
												byte[] f_count_four_bytes_int = { // читаем количество строчек f в файле obj // c 24 по 27
												array1d[id+0+offset] ,	array1d[id+1+offset] ,	array1d[id+2+offset] ,	array1d[id+3+offset] } ;	
												int f_count = BitConverter.ToInt32 ( f_count_four_bytes_int , 0 ) ; // количество строк

												byte[] f_count_four_bytes_int_size = { // читаем количество байт , которых нужно умножить на два // c 28 по 31
												array1d[id+4+0+offset] ,	array1d[id+4+1+offset] ,	array1d[id+4+2+offset] ,	array1d[id+4+3+offset] } ;	
												int f_size_count = BitConverter.ToInt32 ( f_count_four_bytes_int_size , 0 ) ; // 

												//эта цифра указывает сколько байт*2 надо считать // например она равна 6 , значит нужно считать 6 пар типа [00 00]
												//Console.WriteLine("Количество граней = " + f_count/3 + "\t" + "Количество байт = "   + f_count*2 + "\n" ) ; 

												// --------------------------------------------------------------------------------------------------------------

												for ( int ii = 0 ; ii < f_size_count*2 ; ii++ ) 
												{		// добаляем все байты в список
														primsss_count.Add ( array1d[id + 8 + ii + offset] ) ; 
												}

												// --------------------------------------------------------------------------------------------------------------

												// размер "промежутков" с какой то инфой между блока граней 
												offset = offset + 8 + f_size_count*2 + 44 ; 
												if ( f_count % 2 != 0 ) offset = offset + 2 ;

												// --------------------------------------------------------------------------------------------------------------

												using ( StreamWriter sw = new StreamWriter ( writePath , true , System.Text.Encoding.Default ) )
												{
//!!!!!!!!!!!!!!!!!!
														sw.WriteLine( "\ng faces{0}" , fi ) ; 
														sw.WriteLine( "# {0} faces " , f_count ) ; 
												}

												// --------------------------------------------------------------------------------------------------------------

												for ( int iii = 0 ; iii < primsss_count.Count ; iii+=6 )
												{
														byte[] twoBytes1 = { primsss_count[iii+0] , primsss_count[iii+1] } ; // 00 00 // 03 00 
														byte[] twoBytes2 = { primsss_count[iii+2] , primsss_count[iii+3] } ; // 01 00 // 02 00
														byte[] twoBytes3 = { primsss_count[iii+4] , primsss_count[iii+5] } ; // 02 00 // 01 00

														UInt16 f1 = (UInt16)BitConverter.ToUInt16(twoBytes1 , 0) ; // 0
														UInt16 f2 = (UInt16)BitConverter.ToUInt16(twoBytes2 , 0) ; // 1
														UInt16 f3 = (UInt16)BitConverter.ToUInt16(twoBytes3 , 0) ; // 2

														// --------------------------------------------------------------------------------------------------------------

														using ( StreamWriter sw = new StreamWriter ( writePath , true , System.Text.Encoding.Default ) )
														{
//!!!!!!!!!!!!!!!!!!
																sw.WriteLine( "f " + (f1+1) + " " + (f2+1) + " " + (f3+1) ) ; 
														}
												}

												primsss_count.Clear() ; // очистили список , чтобы не наполнялся другими данными
										}

										primsss_count.Clear() ; // очистили список , чтобы не наполнялся другими данными

										// --------------------------------------------------------------------------------------------------------------

								}	// if // если нашли грани , то записали в файл

								primsss_count.Clear() ; // очистили список , чтобы не наполнялся другими данными

							// жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж

						} // for // прошли по всему содержимому массива байт прочитанных из файла

		 		} // foreach // прошли по каждому файлу

		} // Main

} // class

// жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
